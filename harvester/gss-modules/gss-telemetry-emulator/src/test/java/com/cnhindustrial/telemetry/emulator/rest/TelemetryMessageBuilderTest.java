package com.cnhindustrial.telemetry.emulator.rest;

import com.cnhindustrial.telemetry.common.json.BaseDeserializationSchema;
import com.cnhindustrial.telemetry.common.model.TelemetryDto;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import static com.cnhindustrial.telemetry.common.model.Constants.DATE_TIME_FORMATTER;

/**
 * Message generated by {@link TelemetryMessageBuilder} is deserializable in the pipeline by {@link BaseDeserializationSchema}.
 */
class TelemetryMessageBuilderTest {

    private static final Logger LOGGER = LoggerFactory.getLogger(TelemetryMessageBuilderTest.class);

    private MessageBuilder messageBuilder = new TelemetryMessageBuilder();
    private BaseDeserializationSchema<TelemetryDto> deserializationSchema = new BaseDeserializationSchema<>(TelemetryDto.class);
    private Map<String, Object> params = new HashMap<>();

    @BeforeEach
    void setUp() {
        params.put("assetId", "VTJWOIYBVO4PIOBGA");
        params.put("lon", 45);
        params.put("lat", 95);
        params.put("time", LocalDateTime.of(2020, 1, 14, 22, 05, 39).format(DATE_TIME_FORMATTER));
        params.put("telemetryData", "");
    }

    @Test
    void template() throws IOException {
        String build = messageBuilder.build(params);
        LOGGER.debug("The JSON:\n{}", build);

        TelemetryDto deserialized = deserializationSchema.deserialize(build.getBytes());

        Assertions.assertEquals("PCM_TELEMATICS", deserialized.getFrom());
    }

    @Test
    void name() {
        Assertions.assertEquals("status", messageBuilder.getTemplateName());
    }

    @Test
    void together() throws IOException {
        Map<String, Object> recordParam = Collections.singletonMap("familyCode", "ENG_OIL_TEMP");

        MessageBuilder recordMessageBuilder = new TelemetryRecordMessageBuilder();
        String record = recordMessageBuilder.build(recordParam);
        LOGGER.debug("The JSON:\n{}", record);

        params.put("telemetryData", record + ',' + record);
        params.put("familyCode", "ENG_OIL_TEMP");

        String build = messageBuilder.build(params);
        LOGGER.debug("The JSON:\n{}", build);

        TelemetryDto deserialized = deserializationSchema.deserialize(build.getBytes());

        Assertions.assertEquals("PCM_TELEMATICS", deserialized.getFrom());
    }
}